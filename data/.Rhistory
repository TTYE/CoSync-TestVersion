ind = which(p_value_matrix > temp2)
p_value_matrix[ind] = temp2[ind]
p_value_matrix
grangerTest = function(x,p = 1) {
#remove rows with NA
x = x[complete.cases(x),]
#detrend for the signal
x = t(apply(x,1,function(x)
detrend(x)))
a = MSBVAR::granger.test(t(x),p = p)
F_statistics = a[,1]
p_value = a[,2]
n = nrow(x)
#assign NAs to be 0 so to avoid error in next matrix forming step
F_statistics[is.na(F_statistics)]<-0
p_value[is.na(p_value)]<-1
#F_statistics and p_value are vectors, need to change to matrix
#add some NA at the diagonal places
#store the index you want to insect 0 or 1
na_ind=seq(1, n^2, by = n+1)
temp_all <- numeric(length(F_statistics)+length(na_ind))
temp_all[na_ind] <- NA
temp_all[!is.na(temp_all)] <- F_statistics
F_statistics_matrix=matrix(temp_all,nrow=n,ncol=n)
#Since we are not considering self loop, any value works
F_statistics_matrix[is.na(F_statistics_matrix)]<-0
rownames(F_statistics_matrix) = rownames(x)
colnames(F_statistics_matrix) = rownames(x)
temp_all[!is.na(temp_all)] <- p_value
p_value_matrix=matrix(temp_all,nrow=n,ncol=n)
#Since we are not considering self loop, any value works
p_value_matrix[is.na(p_value_matrix)]<-0
rownames(p_value_matrix) = rownames(x)
colnames(p_value_matrix) = rownames(x)
#Take the maximum value, make the matrix symetric
temp1 = t(F_statistics_matrix)
ind = which(F_statistics_matrix < temp1)
F_statistics_matrix[ind] = temp1[ind]
#Take the minimum value, make the matrix symetric
temp2 = t(p_value_matrix)
ind = which(p_value_matrix > temp2)
p_value_matrix[ind] = temp2[ind]
return(list(
"F_statistics_matrix" = F_statistics_matrix,"p_value_matrix" = p_value_matrix
))
}
p
x=expr1[1:500,]
x = x[complete.cases(x),]
#detrend for the signal
x = t(apply(x,1,function(x)
detrend(x)))
a = MSBVAR::granger.test(t(x),p = p)
F_statistics = a[,1]
p_value = a[,2]
n = nrow(x)
#assign NAs to be 0 so to avoid error in next matrix forming step
F_statistics[is.na(F_statistics)]<-0
p_value[is.na(p_value)]<-1
#F_statistics and p_value are vectors, need to change to matrix
#add some NA at the diagonal places
#store the index you want to insect 0 or 1
na_ind=seq(1, n^2, by = n+1)
temp_all <- numeric(length(F_statistics)+length(na_ind))
temp_all[na_ind] <- NA
temp_all[!is.na(temp_all)] <- F_statistics
F_statistics_matrix=matrix(temp_all,nrow=n,ncol=n)
#Since we are not considering self loop, any value works
F_statistics_matrix[is.na(F_statistics_matrix)]<-0
rownames(F_statistics_matrix) = rownames(x)
colnames(F_statistics_matrix) = rownames(x)
temp_all[!is.na(temp_all)] <- p_value
p_value_matrix=matrix(temp_all,nrow=n,ncol=n)
#Since we are not considering self loop, any value works
p_value_matrix[is.na(p_value_matrix)]<-0
rownames(p_value_matrix) = rownames(x)
colnames(p_value_matrix) = rownames(x)
#Take the maximum value, make the matrix symetric
temp1 = t(F_statistics_matrix)
ind = which(F_statistics_matrix < temp1)
F_statistics_matrix[ind] = temp1[ind]
#Take the minimum value, make the matrix symetric
temp2 = t(p_value_matrix)
ind = which(p_value_matrix > temp2)
p_value_matrix[ind] = temp2[ind]
p_value_matrix[490:500,490:500]
max(p_value_matrix-t(p_value_matrix))
min(p_value_matrix-t(p_value_matrix))
min(p_value_matrix-t(p_value_matrix))==0
max(p_value_matrix-t(p_value_matrix))==0
max(F_statistics_matrix-t(F_statistics_matrix))==0
min(F_statistics_matrix-t(F_statistics_matrix))==0
hist(phase1$entropy_rho)
?hist
hist(phase1$entropy_rho,breaks=20)
hist(phase1$entropy_rho,breaks=50)
hist(phase1$entropy_rho,breaks=100)
hist(phase1$gamma,breaks=100)
hist(phase1$strobo_lmbda,breaks=100)
hist(phase1$strobo_angle,breaks=100)
hist(phase1$entropy_rho,breaks=100)
hist(phase1$strobo_lmbda,breaks=100)
x=as.matrix(read.csv("D:\\single_cell_synco\\v01\\mysycV01\\new_results\\phase1_gamma.csv", row.names = 1,as.is=TRUE))
y=as.matrix(read.csv("D:\\single_cell_synco\\v01\\mysycV01\\new_results\\phase2_gamma.csv", row.names = 1,as.is=TRUE))
power1=wgcnaPower(x)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
xlab = "Soft Threshold (power)",ylab = "Scale Free Topology Model Fit,signed R^2",type =
"n",
main = paste("Scale independence")
);
text(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
labels = powers,cex = cex1,col = "red"
);
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.90,col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(
power1$fitIndices[,1], power1$fitIndices[,5],
xlab = "Soft Threshold (power)",ylab = "Mean Connectivity", type =
"n",
main = paste("Mean connectivity")
)
text(
power1$fitIndices[,1], power1$fitIndices[,5], labels = powers, cex = cex1,col =
"red"
)
power1$fitIndices[,3]
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
xlab = "Soft Threshold (power)",ylab = "Scale Free Topology Model Fit,signed R^2",type =
"n",
main = paste("Scale independence")
);
text(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
labels = powers,cex = cex1,col = "red"
);
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.90,col = "red")
power1$fitIndices[,1]
-sign(power1$fitIndices[,3]) * power1$fitIndices[,2]
powers
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
xlab = "Soft Threshold (power)",ylab = "Scale Free Topology Model Fit,signed R^2",type =
"n",
main = paste("Scale independence")
);
text(
power1$fitIndices[,1],-sign(power1$fitIndices[,3]) * power1$fitIndices[,2],
labels = c(c(1:10), seq(from = 12, to=20, by=2)),cex = cex1,col = "red"
);
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.90,col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(
power1$fitIndices[,1], power1$fitIndices[,5],
xlab = "Soft Threshold (power)",ylab = "Mean Connectivity", type =
"n",
main = paste("Mean connectivity")
)
text(
power1$fitIndices[,1], power1$fitIndices[,5], labels = c(c(1:10), seq(from = 12, to=20, by=2)), cex = cex1,col =
"red"
)
powers
c(c(1:10), seq(from = 12, to = 20, by = 2))
power2=wgcnaPower(y)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(
power2$fitIndices[,1],-sign(power2$fitIndices[,3]) * power2$fitIndices[,2],
xlab = "Soft Threshold (power)",ylab = "Scale Free Topology Model Fit,signed R^2",type =
"n",
main = paste("Scale independence")
);
text(
power2$fitIndices[,1],-sign(power2$fitIndices[,3]) * power2$fitIndices[,2],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),cex = cex1,col = "red"
);
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.90,col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(
power2$fitIndices[,1], power2$fitIndices[,5],
xlab = "Soft Threshold (power)",ylab = "Mean Connectivity", type =
"n",
main = paste("Mean connectivity")
)
text(
power2$fitIndices[,1], power2$fitIndices[,5], labels = c(c(1:10), seq(from = 12, to = 20, by = 2)), cex = cex1,col =
"red"
)
modules1=wgcnaAnalysis(x,softPower=1)
WGCNA::plotDendroAndColors(
modules1$geneTree, modules1$modulColors, "Dynamic Tree Cut", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05,main = "Gene dendrogram and module colors"
)
modules2=wgcnaAnalysis(y,1)
WGCNA::plotDendroAndColors(
modules2$geneTree, modules2$modulColors, "Dynamic Tree Cut", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05,main = "Gene dendrogram and module colors"
)
ModulePlots(x=x,expr=expr1,dynamicColors=modules1$dynamicColors,thisColor = "blue",cut = 0.5)
min(x)
max(x)
x=x
expr=expr1
dynamicColors=modules1$dynamicColors
thisColor = "blue"
cut = 0.5
names(dynamicColors[dynamicColors == thisColor]
)
thisColor
dynamicColors
modules1$dynamicColors
modulColors=modules1$modulColors
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.5)
#' Plot modules
#'
#' To visualize modules in graph and in heatmap
#'
#' @param x - co-sychronization matrix returned by phaseLockingMatrix, grangerTest or coherenceTest
#' @param expr - expression profile
#' @param modulColors - color vector return by wgcnaAnalysis
#' @param thisColor - the color of the module to be plotted
#' @param cut - the threshold for the co-sychronization matrix, extacting submatrix that is bigger than this cutoff, and plot the graph.
#'
#' @return  2 plots.
#' @example
#'
#' @export
ModulePlots <-
function(x,modulColors,thisColor = "blue",cut = 0.5) {
#bug here
#row names != col names of x
#colnames(x)=rownames(x)
par(mfrow = c(1,2));
#extract the adjacency matrix in the same module
this_adj = x[names(modulColors[modulColors == thisColor]),
names(modulColors[modulColors == thisColor])]
this_adj[this_adj<cut]=0
diag(this_adj)=0
#plot the vertices with edges incident to
all_names=unique(unlist(apply(this_adj,1,function(x)names(which(x>0)))))
plot_adj=this_adj[all_names,all_names]
net = igraph::graph.adjacency(
as.matrix(plot_adj),mode = "undirected",weighted = TRUE,diag = FALSE
)
V(net)$size<-degree(net)
#for phase gamma and coherence, we can set the edge weight this way. Not for granger p-value
igraph::plot.igraph(
net,vertex.label = V(net)$name,layout = layout.fruchterman.reingold,
edge.color = "black",vertex.label.color='black',vertex.label.font=1,vertex.label.cex=0.5,edge.width = E(net)$weight,main = paste("Module", thisColor)
)
#heatmap, require library(gplot)
this_expr = expr[names(modulColors[modulColors == thisColor]),]
heatmap(this_expr,Rowv = TRUE, Colv=FALSE,labRow=FALSE,col=cm.colors(256),main = paste("Module", thisColor))
}
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.5)
modulColors=modules1$modulColors
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.5)
ModulePlots <-
function(x,expr,modulColors,thisColor = "blue",cut = 0.5) {
#bug here
#row names != col names of x
#colnames(x)=rownames(x)
par(mfrow = c(1,2));
#extract the adjacency matrix in the same module
this_adj = x[names(modulColors[modulColors == thisColor]),
names(modulColors[modulColors == thisColor])]
this_adj[this_adj<cut]=0
diag(this_adj)=0
#plot the vertices with edges incident to
all_names=unique(unlist(apply(this_adj,1,function(x)names(which(x>0)))))
plot_adj=this_adj[all_names,all_names]
net = igraph::graph.adjacency(
as.matrix(plot_adj),mode = "undirected",weighted = TRUE,diag = FALSE
)
V(net)$size<-degree(net)
#for phase gamma and coherence, we can set the edge weight this way. Not for granger p-value
igraph::plot.igraph(
net,vertex.label = V(net)$name,layout = layout.fruchterman.reingold,
edge.color = "black",vertex.label.color='black',vertex.label.font=1,vertex.label.cex=0.5,edge.width = E(net)$weight,main = paste("Module", thisColor)
)
#heatmap, require library(gplot)
this_expr = expr[names(modulColors[modulColors == thisColor]),]
heatmap(this_expr,Rowv = TRUE, Colv=FALSE,labRow=FALSE,col=cm.colors(256),main = paste("Module", thisColor))
}
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.5)
x=phase1$gamma
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.5)
ModulePlots(x=x,expr=expr1,modulColors=modules1$modulColors,thisColor = "blue",cut = 0.3)
ModulePlots <-
function(x,expr,modulColors,thisColor = "blue",cut = 0.3) {
#bug here
#row names != col names of x
#colnames(x)=rownames(x)
par(mfrow = c(1,2));
#extract the adjacency matrix in the same module
this_adj = x[names(modulColors[modulColors == thisColor]),
names(modulColors[modulColors == thisColor])]
this_adj[this_adj<cut]=0
diag(this_adj)=0
#plot the vertices with edges incident to
all_names=unique(unlist(apply(this_adj,1,function(x)names(which(x>0)))))
plot_adj=this_adj[all_names,all_names]
net = igraph::graph.adjacency(
as.matrix(plot_adj),mode = "undirected",weighted = TRUE,diag = FALSE
)
V(net)$size<-degree(net)
#for phase gamma and coherence, we can set the edge weight this way. Not for granger p-value
igraph::plot.igraph(
net,vertex.label = V(net)$name,layout = layout.fruchterman.reingold,
edge.color = "black",vertex.label.color='black',vertex.label.font=1,vertex.label.cex=0.5,edge.width = E(net)$weight,main = paste("Module", thisColor)
)
#heatmap, require library(gplot)
this_expr = expr[names(modulColors[modulColors == thisColor]),]
heatmap(this_expr,Rowv = TRUE, Colv=FALSE,labRow=FALSE,col=cm.colors(256),main = paste("Module", thisColor))
}
modules1$modules
modules1$modulColors
?labels2colors
colors=modules1$modules
WGCNA::labels2colors(colors)
names(modules1$modules)
ModuleAnnotation <-
function(colors = xx) {
geneList = names(colors)
#Generate module annotation table
#Step 3: take the results and output them to an excel file
#warning:this uses GO.db and AnnotationDBI and the organism specific annotation
#the inputs are colorlist and genename
#colorlist <- lnsing$colors
#the actual code converts the hgnc_symbol to entrez id, which is needed to use the GOenrichment analysis
ensembl <- biomaRt::useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mapTab <-
biomaRt::getBM(
attributes = c("hgnc_symbol", "entrezgene"), filters = "hgnc_symbol", values = geneList, mart = ensembl, uniqueRows =
FALSE
)
#the next three lines remove duplicate rows
dupRows <-
union(which(duplicated(mapTab[,1])), which(duplicated(mapTab[,2])))
entrezIds <- mapTab[-dupRows, 2]
names(entrezIds) <- mapTab[-dupRows, 1]
#this matches the resulting entrezIds to their respective genes
list <-
lapply(geneList, function(x)
if (length(which(x == names(entrezIds))) > 0)
entrezIds[[which(x == names(entrezIds))]])
#remove any null values and replace with 0
list1 <- lapply(list, function(x)
if (is.null(x))
0
else
x);
list2 = unlist(list1)
moduleColors = WGCNA::labels2colors(colors)
#non matched are returned as 0
#this is the enrichment analysis, which only takes entrez id
#it takes the 10 best fit, generally this enrichment is poorer than online ones and should only
#be used as a preliminary test, not for publications
GOenr = WGCNA::GOenrichmentAnalysis(moduleColors, list2, nBestP = 10);
tab = GOenr$bestPTerms[[4]]$enrichment
return(tab)
}
state1_module=ModuleAnnotation(colors = modules1$modules)
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
state1_module=ModuleAnnotation(colors = modules1$modules)
head(state1_module)
state1_module[1:5,1:6]
state1_module[1:5,1:8]
overlap_matrix=wgcnaOverlap(module1 = module1,module2 = module2)
overlap_matrix=wgcnaOverlap(module1 = modules1$modules,module2 = modules2$modules)
overlap_matrix=wgcnaOverlap(modules1 = modules1$modules,modules2 = modules2$modules)
wgcnaOverlap <- function(modules1,modules2) {
#   #begin the cross comparison
#   # Isolate the module labels in the order they appear in ordered module eigengenes
#   ##to remove the ME, just start from the 3rd string -cy
#   lnModuleLabels = substring(names(lnMEs), 3)
#   pbModuleLabels = substring(names(pbMEs), 3)
module1Colors=WGCNA::labels2colors(modules1)
module2Colors=WGCNA::labels2colors(modules2)
# Convert the numeric module labels to color labels
color_set1= WGCNA::labels2colors(as.numeric(unique(modules1)))
color_set2 = WGCNA::labels2colors(as.numeric(unique(modules2)))
# Numbers of female and consensus modules
n_Mod1 = length(color_set1)
n_Mod2 = length(color_set2)
# Initialize tables of correspondence and of the corresponding counts
correspd_table  = matrix(0, nrow = n_Mod1, ncol = n_Mod2);
count_table = matrix(0, nrow = n_Mod1, ncol = n_Mod2);
# Execute all pairwaise comparisons
for (i in 1:n_Mod1)
for (j in 1:n_Mod2)
{
members1 = (module1Colors == color_set1[i]);
members2 = (module2Colors == color_set2[j]);
if (sum(members1) > 400 || sum(members2) > 400) {
correspd_table [i,j] = 0;
}else{
correspd_table [i,j] = sum(members1 + members2 == 2) / (0.5 * (sum(members1) +
sum(members2)))
};
#pTable[i, j] = -log10(fisher.test(members1, members2, alternative = "greater")$p.value);
count_table[i, j] = sum(module1Colors == color_set1[i] &
module2Colors ==
color_set2[j])
}
# Marginal counts (really module sizes)
mod1_totals = apply(count_table, 1, sum)
mod2_totals = apply(count_table, 2, sum)
# Actual plotting
sizeGrWindow(10,7 );
par(mfrow=c(1,1));
par(cex = 1.0);
par(mar=c(8, 10.4, 2.7, 1)+0.3);
# Use function labeledHeatmap to produce the color-coded table with all the trimmings
WGCNA::labeledHeatmap(Matrix = correspd_table,
xLabels = paste("mod1", color_set1),
yLabels = paste("mod2", color_set2),
colorLabels = TRUE,
xSymbols = paste(color_set1, mod1_totals, sep=":"),
ySymbols = paste(color_set2, mod2_totals, sep=":"),
textMatrix = count_table,
colors = blueWhiteRed(100)[50:100],
main = "overlapping matrix colored by correspondence",
cex.text = 1.0, cex.lab = 1.0, setStdMargins = FALSE);
return(list(correspondence=correspd_table,counts=count_table,
mod1_totals=mod1_totals,mod2_totals=mod2_totals))
}
overlap_matrix=wgcnaOverlap(modules1 = modules1$modules,modules2 = modules2$modules)
m1=modules1$modules
m2=modules2$modules
module1Colors=WGCNA::labels2colors(m1)
module2Colors=WGCNA::labels2colors(m2)
# Convert the numeric module labels to color labels
color_set1= WGCNA::labels2colors(as.numeric(unique(m1)))
color_set2 = WGCNA::labels2colors(as.numeric(unique(m2)))
# Numbers of female and consensus modules
n_Mod1 = length(color_set1)
n_Mod2 = length(color_set2)
# Initialize tables of correspondence and of the corresponding counts
correspd_table  = matrix(0, nrow = n_Mod1, ncol = n_Mod2);
count_table = matrix(0, nrow = n_Mod1, ncol = n_Mod2);
# Execute all pairwaise comparisons
for (i in 1:n_Mod1)
for (j in 1:n_Mod2)
{
members1 = (module1Colors == color_set1[i]);
members2 = (module2Colors == color_set2[j]);
if (sum(members1) > 400 || sum(members2) > 400) {
correspd_table [i,j] = 0;
}else{
correspd_table [i,j] = sum(members1 + members2 == 2) / (0.5 * (sum(members1) +
sum(members2)))
};
#pTable[i, j] = -log10(fisher.test(members1, members2, alternative = "greater")$p.value);
count_table[i, j] = sum(module1Colors == color_set1[i] &
module2Colors ==
color_set2[j])
}
# Marginal counts (really module sizes)
mod1_totals = apply(count_table, 1, sum)
mod2_totals = apply(count_table, 2, sum)
# Actual plotting
sizeGrWindow(10,7 );
par(mfrow=c(1,1));
par(cex = 1.0);
par(mar=c(8, 10.4, 2.7, 1)+0.3);
# Use function labeledHeatmap to produce the color-coded table with all the trimmings
WGCNA::labeledHeatmap(Matrix = correspd_table,
xLabels = paste("mod1", color_set1),
yLabels = paste("mod2", color_set2),
colorLabels = TRUE,
xSymbols = paste(color_set1, mod1_totals, sep=":"),
ySymbols = paste(color_set2, mod2_totals, sep=":"),
textMatrix = count_table,
colors = blueWhiteRed(100)[50:100],
main = "overlapping matrix colored by correspondence",
cex.text = 1.0, cex.lab = 1.0, setStdMargins = FALSE);
mod1_totals
color_set1
WGCNA::labeledHeatmap(Matrix = correspd_table,
xLabels = paste("mod1", color_set1),
yLabels = paste("mod2", color_set2),
colorLabels = TRUE,
xSymbols = paste(color_set1, mod1_totals, sep=":"),
ySymbols = paste(color_set2, mod2_totals, sep=":"),
textMatrix = count_table,
colors = blueWhiteRed(100)[50:100],
main = "overlapping matrix colored by correspondence",
cex.text = 1.0, cex.lab = 1.0, setStdMargins = FALSE);
setwd("D:/single_cell_synco/v01/mysycV01/data")
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
save(x, y, file = "xy.RData")
load("D:/single_cell_synco/v01/mysycV01/data/xy.RData")
save(phase1, phase2, file = "phase_locking_HSMM.RData")
load("D:/single_cell_synco/v01/mysycV01/data/phase_locking_HSMM.RData")
hist(phase1$strobo_lmbda,100)
